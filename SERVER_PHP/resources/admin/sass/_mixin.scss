@mixin render-gradient($deg, $start, $end ){

  background: -moz-linear-gradient($deg, $start, $end) !important;
  background: -webkit-linear-gradient($deg, $start, $end) !important;
  background: -o-linear-gradient($deg,$start, $end) !important;
  background: -ms-linear-gradient($deg, $start, $end) !important;
  background: linear-gradient($deg, $start, $end) !important;
}

// Make gradient
@mixin make-gradient($name, $value) {
  .#{$name}-gradient {

    @include render-gradient(40deg, map-get($value, start), map-get($value, end));
  }
}

// Make gradient
@mixin make-gradient-rgba($name, $value) {
  .#{$name}-gradient-rgba {
    
    @include render-gradient(40deg, map-get($value, start), map-get($value, end));
  }
}

// Make gradient
@mixin make-bg-gradient($name, $value) {
  .bg-gradient-#{$name} {

    @include render-gradient(131.93deg, map-get($value, start), map-get($value, end));
  }
}


@mixin clearfix {
  &:after {
    clear: both;
    content: ".";
    display: block;
    height: 0;
    line-height: 0;
    visibility: hidden;
    overflow: hidden;
  }
}


//// progress mixin
@mixin progress-loading($color) {
  .progress-loadding{
    background-color:$color;
    &:before{
      content:'';
      position:absolute;
      background-color:inherit;
      top:0;
      left:0;
      bottom:0;
      will-change:left, right;
      -webkit-animation:indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
      animation:indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite
    }

    &:after{
      content:'';
      position:absolute;
      background-color:inherit;
      top:0;
      left:0;
      bottom:0;
      will-change:left, right;
      -webkit-animation:indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
      animation:indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
      -webkit-animation-delay:1.15s;
      animation-delay:1.15s
    }
  }
}

@mixin render-transform($value){
  -webkit-transform: $value;
  -moz-transform: $value;
  -o-transform: $value;
  -ms-transform: $value;
  transform: $value;
}


$btn-disabled-opacity: .65 !default;
@mixin btn-interaction($background, $border, $color) {
  &:hover {
    background-color: $background;
    border: 2px solid $border;
    color: $color;
    -webkit-box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);
    box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);
  }

  &:focus,
  &.focus {
    -webkit-box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);
    box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);
    outline: 0;
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & { // stylelint-disable-line selector-no-qualifying-type
    pointer-events: none;
    opacity: $btn-disabled-opacity;
  }
}


//// define grid min of device
$MIN_XSM: 375px;   /// <  425px => medium mobile
$MIN_XS : 425px;   /// <  576px => larger mobile
$MIN_SM : 576px;   // 576px -> 768px
$MIN_MD : 768px;   /// 768px -> 991px
$MIN_LG : 992px;   /// 992px ----> 1199px
$MIN_XL : 1200px;  /// 1200px - 1320px
$MIN_XXL: 1320px;  /// 1320px - 1400px

@mixin Screen($canvas) {
  @if $canvas == XSM {
    @media (min-width:$MIN_XSM)  { @content; } 
  }@else if $canvas == XS {
    @media (min-width:$MIN_XS)  { @content; } 
  }@else if $canvas == SM {
    @media (min-width: $MIN_SM) { @content; } 
  }@else if $canvas == MD {
    @media (min-width: $MIN_MD) { @content; } 
  }@else if $canvas == LG {
    @media (min-width: $MIN_LG) { @content; } 
  }@else if $canvas == XL {
    @media (min-width: $MIN_XL) { @content; } 
  }@else if $canvas == XXL {
    @media (min-width:$MIN_XXL)  { @content; }
  }
}
