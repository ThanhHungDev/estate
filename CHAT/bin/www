#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app       = require('../app');
var debug     = require('debug')('chat:server');
var http      = require('http');
var eventIO   = require('../app.socket');
var dbConnect = require('../app.mongo.connect');
var CONFIG = require("../config")
var dotenv    = require('dotenv')                 /// thêm dot env vào hệ thống
dotenv.config() /// load file .env

const initIndex = require('../routes/index'),
      initUsers = require('../routes/users'),
      initAPIs  = require("../routes/api");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
console.log(CONFIG.CORS_IO )
var server = http.createServer(app);
eventIO.attach(server, {
  origins: CONFIG.CORS_IO
})

/// pass socket to api
app.use(function(req, res, next){
  res.io = eventIO
  next()
})
// // respond with "hello world" when a GET request is made to the homepage
app.get('/onlines', function (req, res) {
  
  return res.status(200).json({ message: 'hello onlines', onlines: res.io.USER_ONLINES || [] })
})

/// set root index
initIndex(app)
/// set root users
initUsers(app)
/// set root api
initAPIs(app)

// server.listen(port); /// comment lại 
server.listen(port,  () => {

  console.log(`server run: http://localhost:${port}`)  
  dbConnect.myConnection()
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
